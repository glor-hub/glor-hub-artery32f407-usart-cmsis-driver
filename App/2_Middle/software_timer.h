#ifndef _SOFTWARE_TIMER_H_
#define _SOFTWARE_TIMER_H_

#include "at32f403a_407.h"
#include "arm_timer.h"

//Programming timers on base Timerx.
typedef enum {
    TEST_APP_SOFTWARE_TIMER_USART1_TIMEOUT_TX = 0,
    TEST_APP_SOFTWARE_TIMER_USART1_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_USART2_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_USART2_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_USART3_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_USART3_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_UART4_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_UART4_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_UART5_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_UART5_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_USART6_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_USART6_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_UART7_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_UART7_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_UART8_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_UART8_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_SPI1_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_SPI1_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_SPI2_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_SPI2_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_SPI3_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_SPI3_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_SPI4_TIMEOUT_TX,
    TEST_APP_SOFTWARE_TIMER_SPI4_TIMEOUT_RX,
    TEST_APP_SOFTWARE_TIMER_NUM_TIMERS
} eTEST_APP_SOFTWARE_TIMER_TimerTypes_t;

typedef struct {
    confirm_state State;
    uint32_t Time;
    volatile uint32_t Counter;
    volatile flag_status Flag;
} TEST_APP_SOFTWARE_TIMER_Timer_t;

void TEST_APP_SOFTWARE_TIMER_TimerInit(void);

void TEST_APP_SOFTWARE_TIMER_TimerEnable(eTEST_APP_SOFTWARE_TIMER_TimerTypes_t timer, uint32_t time);

void TEST_APP_SOFTWARE_TIMER_TimerDisable(eTEST_APP_SOFTWARE_TIMER_TimerTypes_t timer);

flag_status TEST_APP_SOFTWARE_TIMER_TimerTestFlag(eTEST_APP_SOFTWARE_TIMER_TimerTypes_t timer);

confirm_state TEST_APP_SOFTWARE_TIMER_TimerTestSet(eTEST_APP_SOFTWARE_TIMER_TimerTypes_t timer);

#endif //_TIMER_H_
